# customising gitolite

Much of gitolite (g3)'s functionality comes from programs and scripts that are
not considered "core".  This keeps the core simpler, and allows you to enhance
gitolite for your own purposes without too much fuss.  (As an extreme example,
even mirroring is not in core now!)

Here's how to find out more:

  * this document describes the types of non-core programs and how/where to
    install your own

  * the [developer notes][dev-notes] page tells you how to write your own
    non-core programs

  * the [list of non-core programs][non-core] talks about what's already
    shipped with gitolite, with a brief description of each

----

TOC

----

## #ncintro introduction

There are 5 basic types of non-core programs.

  * *Commands* can be run from the shell command line.  Among those, the ones
    in the ENABLE list in the rc file can also be run remotely.
  * *Hooks* are standard git hooks.
  * *Sugar scripts* change the conf language for your convenience.  The word
    sugar comes from "syntactic sugar".
  * *Triggers* are to gitolite what hooks are to git.  I just chose a
    different name to avoid confusion and constant disambiguation in the docs.
  * **VREFs** are extensions to the access control check part of gitolite.

## #ncloc locations...

### ...for non-core programs shipped with gitolite

`gitolite query-rc GL_BINDIR` will tell you where shipped non-core programs
reside.  Within that directory, the subdirectories of interest are:

  * `commands` for commands.
  * `syntactic-sugar` for sugar scripts.
  * `triggers` and `lib/Gitolite/Triggers` for triggers ([this][triggers] will
    explain the difference).
  * `VREF` for [VREFs][vref].

### #localcode ...for *your* non-core programs

If you want to add your own non-core programs, or even *override* the shipped
ones with your own, you can.

Put your programs in some convenient directory and use the `LOCAL_CODE` rc
variable to tell gitolite where that is.  **Please supply the FULL path** to
this variable.

Within that directory, you can use any or all of these subdirectories:

  * `commands`
  * `hooks/common` (see note below)
  * `syntactic-sugar`
  * `triggers` and `lib/Gitolite/Triggers`
  * `VREF`

Note: the `hooks/common` directory is a bit special.  If you add new hooks to
this, you must run either `gitolite setup`, or at least `gitolite setup
--hooks-only`.

### #pushcode using the gitolite-admin repo to manage non-core code

The location given in `LOCAL_CODE` could be anywhere on disk, like say
`$ENV{HOME}/local`.

However, some administrators find it convenient to use the admin repo to
manage this code as well, getting the benefits of versioning them as well as
making changes to them without having to log on to the server.

To do this, simply point `LOCAL_CODE` to someplace inside `$GL_ADMIN_BASE`
(i.e., `$HOME/.gitolite`) in the rc file.

If you want to do this, I **strongly** suggest:

    LOCAL_CODE                  =>  "$ENV{HOME}/.gitolite/local",

Then you create a directory called "local" in your gitolite clone, and put
stuff there (e.g., VREFs go in `local/VREF`, and commands in
`local/commands`).

(Note: when you do this, gitolite takes care of running `gitolite setup
--hooks-only` when you change any hooks and push).

#### **SECURITY** note on this mode of managing non-core code

**In this mode, anyone who can push changes to the admin repo will effectively
be able to run any arbitrary command on the server.**

This may not matter to many (small) sites, but a large site with lots of
administrators may want to keep the two rights (i.e., "right to push to the
gitolite-admin repo" and "right to run arbitrary programs on the server")
separate.

## #nctypes types of non-core programs

### #commands gitolite "commands"

Gitolite comes with several commands that users can run.  Remote users run
commands by saying:

    ssh git@host command-name [args...]

while on the server you can run

    gitolite command [args...]

Very few commands are designed to be run both ways, but it can be done, by
checking for the presence of env var `GL_USER`.

All commands respond to a single `-h` option with a suitable message.

You can get a **list of available commands** by using the `help` command.
Naturally, a remote user will see a much smaller list than the server user.

You allow a command to be run from remote clients by adding its name to (or
uncommenting it if it's already added but commented out) the ENABLE list in
the [rc][] file.

### #hooks hooks and gitolite

You can install any hooks except these:

  * (all repos) gitolite reserves the `update` hook.  See the "update hook"
    section in [dev-notes][] if you want additional update hook functionality.

  * (gitolite-admin repo only) gitolite reserves the `post-update` hook.

How/where to install them is described in detail in the "locations" section
above, especially [this][localcode] and [this][pushcode].  The summary is that
you put them in the "hooks/common" sub-directory within the directory whose
name is given in the `LOCAL_CODE` rc variable, then run `gitolite setup`.

#### #rsh repo-specific hooks

If you want to add hooks only to specific repos, do this:

  * create a directory called `hooks/repo-specific` in the location specified
    by the [`LOCAL_CODE`][localcode] rc variable

  * add your hooks here, with descriptive names (i.e., not "post-receive",
    etc., but maybe "jenkins" or "deploy" or whatever)

  * uncomment the 'repo-specific-hooks' line in the rc file or add it to the
    ENABLE list if it doesn't exist.

    If your rc file does not have an ENABLE list, you need to add this to the
    POST_COMPILE and the POST_CREATE lists.  Click [here][addtrig] for more on
    all this.

  * now add lines like this to your conf file:

        repo    foo
            RW+     =   @all
            option hook.post-receive    =   deploy

    The syntax should be fairly obvious, but just to be clear, in this case a
    symlink called "post-receive" will be placed in foo.git/hooks, pointing to
    the executable called "deploy" in hooks/repo-specific in the local-code
    area.

    **WARNING**: if the hook already exists, it is silently overwritten.

### #sugar syntactic sugar

Sugar scripts help you change the perceived syntax of the conf language.  The
base syntax of the language is very simple, so sugar scripts take something
*else* and convert it into that.

That way, the admin sees additional features (like allowing continuation
lines), while the parser in the core gitolite engine does not change.

If you want to write your own sugar scripts, please read the "your own sugar"
section in [dev-notes][] first then email me.

You enable a sugar script by uncommenting the feature name in the ENABLE list
in the rc file.

### triggers

Triggers have their own [document][triggers].

### VREFs

VREFs also have their own [document][vref].
